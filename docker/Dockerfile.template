FROM {{ image.repository }}:{{ image.tag }}
MAINTAINER {{ maintainer.name }}, {{ maintainer.email }}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - BASE
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# add utility functions
ADD utils/ /opt/tmp/utils/
ADD metadata/ /root/metadata/
ADD NOTICE.txt /root/license
# Used by 'cfy status' impl to determine if running in container.
ENV DOCKER_ENV True

RUN apt-get update
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - RABBITMQ, DependsOn: ~
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV RABBITMQ_SERVICE_NAME {{ rabbitmq.service_name }}
ENV RABBITMQ_SERVICE_DIR /etc/service/$RABBITMQ_SERVICE_NAME
ENV RABBITMQ_RUN_FILE $RABBITMQ_SERVICE_DIR/run
##### ENV #####
# add run scripts and configuration
ADD rabbitmq/ $RABBITMQ_SERVICE_DIR/

RUN echo installing rabbitmq dependencies && \
    apt-get install -y {% for dep in rabbitmq.reqs %} {{ dep }}{% endfor %} && \
    \
    echo installing rabbitmq-server and setting its properties && \
    apt-get -y install rabbitmq-server && \
    rabbitmq-plugins enable rabbitmq_management && \
    rabbitmq-plugins enable rabbitmq_tracing && \
    \
    echo granting exec permissions && \
    chmod +x $RABBITMQ_RUN_FILE

EXPOSE {% for dep in rabbitmq.ports %} {{ dep }}{% endfor %}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - RIEMANN
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV RIEMANN_SERVICE_NAME {{ riemann.service_name }}
ENV RIEMANN_SERVICE_DIR /etc/service/$RIEMANN_SERVICE_NAME
ENV RIEMANN_RUN_FILE $RIEMANN_SERVICE_DIR/run
ENV MANAGER_CONFIG_PATH $RIEMANN_SERVICE_DIR/manager.config
##### ENV #####
# add run scripts and configuration
ADD riemann/ $RIEMANN_SERVICE_DIR/

RUN echo installing riemann dependencies && \
    apt-get install -y {% for dep in riemann.reqs %} {{ dep }}{% endfor %} && \
    \
    echo downloading jar to service dir and setting permissions on langohr jar && \
    curl {{ riemann.langohr_url }} --create-dirs -o $RIEMANN_SERVICE_DIR/langohr.jar && \
    chmod 644 $RIEMANN_SERVICE_DIR/langohr.jar && \
    \
    echo downloading and installing riemann deb && \
    curl {{ riemann.package_url }} --create-dirs -o /opt/tmp/riemann/riemann.deb && \
    dpkg -i /opt/tmp/riemann/riemann.deb && \
    rm -rf /opt/tmp/riemann/riemann.deb && \
    \
    echo download riemann config && \
    curl -o $MANAGER_CONFIG_PATH {{ riemann.config_url }}

# inject required env vars to run script
RUN sed -i '1s|^|RIEMANN_JAR_PATH='$RIEMANN_SERVICE_DIR'/langohr.jar \n|' $RIEMANN_RUN_FILE && \
    sed -i '1s|^|MANAGER_CONFIG_PATH='$MANAGER_CONFIG_PATH' \n|' $RIEMANN_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $RIEMANN_RUN_FILE && \
    chmod +x $RIEMANN_RUN_FILE

# riemann persistence path
VOLUME {% for dep in riemann.persistence_path %} {{ dep }}{% endfor %}

EXPOSE {% for dep in riemann.ports %} {{ dep }}{% endfor %}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - LOGSTASH
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV LOGSTASH_SERVICE_NAME {{ logstash.service_name }}
ENV LOGSTASH_SERVICE_DIR /etc/service/$LOGSTASH_SERVICE_NAME
# logstash exec file
ENV LOGSTASH_RUN_FILE $LOGSTASH_SERVICE_DIR/run
# logstash conf file
ENV LOGSTASH_CONF_FILE $LOGSTASH_SERVICE_DIR/config.conf
##### ENV #####
# add run scripts and configuration
ADD logstash/ $LOGSTASH_SERVICE_DIR/

RUN echo installing logstash dependencies && \
    apt-get install -y {% for dep in logstash.reqs %} {{ dep }}{% endfor %} && \
    \
    echo download jar file && \
    curl {{ logstash.package_url }} --create-dirs -o $LOGSTASH_SERVICE_DIR/logstash.jar

# inject required env vars to run script
RUN sed -i '1s|^|LOGSTASH_JAR_PATH='$LOGSTASH_SERVICE_DIR/logstash.jar' \n|' $LOGSTASH_RUN_FILE && \
    sed -i '1s|^|LOGSTASH_CONF_PATH='$LOGSTASH_CONF_FILE' \n|' $LOGSTASH_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $LOGSTASH_RUN_FILE && \
    chmod +x $LOGSTASH_RUN_FILE
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - ELASTICSEARCH
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV ELASTICSEARCH_SERVICE_NAME {{ elasticsearch.service_name }}
ENV ELASTICSEARCH_SERVICE_DIR /etc/service/$ELASTICSEARCH_SERVICE_NAME
##### ENV #####
# add run scripts and configuration
ADD elasticsearch/ $ELASTICSEARCH_SERVICE_DIR/


RUN echo  installing elasticsearch dependencies && \
    apt-get install -y {% for dep in elasticsearch.reqs %} {{ dep }}{% endfor %} && \
    \
    echo download elasticsearch binaries && \
    curl {{ elasticsearch.elasticsearch_tar_url }} --create-dirs -o /opt/tmp/elasticsearch/elasticsearch.tar.gz && \
    \
    echo extracting binaries to service dir && \
    mkdir -p $ELASTICSEARCH_SERVICE_DIR && \
    tar -C $ELASTICSEARCH_SERVICE_DIR/ -xvf /opt/tmp/elasticsearch/elasticsearch.tar.gz --strip-components=1 && \
    rm -rf /opt/tmp/elasticsearch/elasticsearch.tar.gz

# start elasticsearch as daemon for configuration purposes.
# todo(adaml): move config to run script
# config includes setting elasticsearch indexes.
RUN /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    $ELASTICSEARCH_SERVICE_DIR/bin/elasticsearch -d && \
    wait_for_port {{ elasticsearch.ports[0] }}' && \
    echo "deleting events index if exists..." && \
    curl --retry 5 --retry-delay 3 -XDELETE http://localhost:9200/cloudify_events/ && \
    echo "creating events index..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_events -d '{"settings": {"analysis": {"analyzer": {"default": {"tokenizer": "whitespace"}}}}}' && \
    echo "deleting index if exists..." && \
    curl --retry 5 --retry-delay 3 -XDELETE http://localhost:9200/cloudify_storage && \
    echo "creating index..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_storage -d '{"settings": {"analysis": {"analyzer": {"default": {"tokenizer": "whitespace"}}}}}' && \
    echo "creating blueprint mapping..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_storage/blueprint/_mapping -d '{"blueprint": {"properties": {"plan": {"enabled": false}}}}' && \
    echo "creating deployment mapping..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_storage/deployment/_mapping -d '{"deployment": {"properties": {"workflows": {"enabled": false}, "inputs": {"enabled": false}, "policy_type": {"enabled": false}, "policy_triggers": {"enabled": false}, "groups": {"enabled": false}, "outputs": {"enabled": false}}}}' && \
    echo "creating node mapping..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_storage/node/_mapping -d '{ "node": { "_id": { "path": "id" }, "properties": { "types": { "type": "string", "index_name": "type" }, "properties": { "enabled": false }, "operations": { "enabled": false }, "relationships": { "enabled": false } } } }' && \
    echo "creating node-instance mapping..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_storage/node_instance/_mapping -d '{ "node_instance": { "_id": { "path": "id" }, "properties": { "runtime_properties": { "enabled": false } } } }' && \
    echo "creating deployment-modifications mapping..." && \
    curl --retry 5 --retry-delay 3 -XPUT http://localhost:9200/cloudify_storage/deployment_modification/_mapping -d '{ "deployment_modification": { "_id": { "path": "id" }, "properties": { "modified_nodes": { "enabled": false }, "node_instances": { "enabled": false }, "context": { "enabled": false } } } }' && \
    echo "printing mappings..." && \
    curl --retry 5 --retry-delay 3 -XGET http://localhost:9200/cloudify_storage/_mapping?pretty=1 && \
    \
    echo changing the default es discovery port to 54329 && \
    echo 'discovery.zen.ping.multicast.port: 54329' >> $ELASTICSEARCH_SERVICE_DIR/config/elasticsearch.yml && \
    echo granting run permissions to run file && \
    chmod +x $ELASTICSEARCH_SERVICE_DIR/run

EXPOSE {% for dep in elasticsearch.ports %} {{ dep }}{% endfor %}
#elasticsearch persistence paths
VOLUME {% for dep in elasticsearch.persistence_path %} {{ dep }}{% endfor %}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - INFLUXDB
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV INFLUXDB_SERVICE_NAME {{ influxdb.service_name }}
# default influxdb config path
ENV INFLUXDB_CONFIG_FILE /opt/influxdb/shared/config.toml
ENV INFLUXDB_RUN_FILE /etc/service/$INFLUXDB_SERVICE_NAME/run
##### ENV #####
# add run scripts and configuration
ADD influxdb/ /etc/service/$INFLUXDB_SERVICE_NAME/

RUN echo installing influxdb dependencies && \
    apt-get install -y {% for dep in influxdb.reqs %} {{ dep }}{% endfor %} && \
    \
    echo downloading influxdb binaries && \
    curl {{ influxdb.package_url }} --create-dirs -o /opt/tmp/influxdb/influxdb.deb && \
    \
    echo installing influxdb && \
    dpkg -i /opt/tmp/influxdb/influxdb.deb && \
    rm -rf /opt/tmp/influxdb/influxdb.deb

RUN echo starting influxdb as daemon to create cloudify db && \
    /bin/bash -c 'source /opt/tmp/utils/bootstrap_utils.sh && \
    /usr/bin/influxdb-daemon -config=$INFLUXDB_CONFIG_FILE && \
    wait_for_port {{ influxdb.ports[0] }}' && \
    curl -s "http://localhost:{{ influxdb.ports[0] }}/db?u=root&p=root" -d "{\"name\": \"cloudify\"}"

# set config path in run file
RUN sed -i '1s|^|INFLUXDB_CONFIG_FILE='$INFLUXDB_CONFIG_FILE' \n|' $INFLUXDB_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $INFLUXDB_RUN_FILE && \
    chmod +x $INFLUXDB_RUN_FILE

#influxdb persistence path
VOLUME {% for dep in influxdb.persistence_path %} {{ dep }}{% endfor %}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - NGINX
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
# set nginx service name
ENV NGINX_SERVICE_NAME {{ nginx.service_name }}
ENV NGINX_SERVICE_DIR /etc/service/$NGINX_SERVICE_NAME
# nginx default conf file path
ENV NGINX_CONF_FILE /etc/nginx/nginx.conf
ENV NGINX_RUN_FILE $NGINX_SERVICE_DIR/run
ENV NGINX_LOGS_DIR $NGINX_SERVICE_DIR/logs
##### ENV #####
# add run scripts and configuration
ADD nginx/cloudify-rest-location.conf $NGINX_SERVICE_DIR/
ADD nginx/default.conf $NGINX_SERVICE_DIR/
ADD nginx/run $NGINX_SERVICE_DIR/
# add ssl default certificate and private key files
ADD nginx/ssl/ /root/cloudify/

RUN echo adding nginx repositories to sources.list file and update repo && \
    echo {{ nginx.source_repos }} | tr -d "'["| tr ',]' '\n' >> /etc/apt/sources.list && \
    apt-get update && \
    \
    echo installing nginx dependencies && \
    apt-get install -y {% for dep in nginx.reqs %} {{ dep }}{% endfor %} && \
    \
    echo download and add signing key && \
    curl {{ nginx.source_key }} --create-dirs -o /opt/tmp/nginx/nginx_signing.key && \
    apt-key add /opt/tmp/nginx/nginx_signing.key && \
    \
    echo installing nginx && \
    apt-get install -y --force-yes $NGINX_SERVICE_NAME

# turn-off daemon execution, set logging dir and default.conf location in conf file
RUN echo "daemon off;" >> $NGINX_CONF_FILE && \
    sed -i "s%/var/log/nginx/error.log warn%$NGINX_SERVICE_DIR/logs/error.log warn%g" $NGINX_CONF_FILE && \
    sed -i "s%/var/run/nginx.pid%$NGINX_SERVICE_DIR/logs/nginx.pid%g" $NGINX_CONF_FILE && \
    sed -i "s%/etc/nginx/conf.d/\*.conf%$NGINX_SERVICE_DIR/default.conf%g" $NGINX_CONF_FILE && \
    mkdir -p $NGINX_LOGS_DIR && \
    \
    echo setting config path in run file && \
    sed -i '1s|^|NGINX_CONF_FILE='$NGINX_CONF_FILE' \n|' $NGINX_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $NGINX_RUN_FILE && \
    chmod +x $NGINX_RUN_FILE

EXPOSE {% for dep in nginx.ports %} {{ dep }}{% endfor %}
# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - CELERY
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV CELERY_SERVICE_NAME {{ celery.service_name }}
ENV CELERY_SERVICE_DIR /etc/service/$CELERY_SERVICE_NAME
ENV CELERY_RUN_FILE $CELERY_SERVICE_DIR/run
ENV CELERY_VIRTUAL_ENV_DIR $CELERY_SERVICE_DIR/env
ENV CELERY_LOG_DIR $CELERY_SERVICE_DIR/logs
##### ENV #####
# add run scripts and configuration
ADD celery/ $CELERY_SERVICE_DIR/

RUN echo installing celery dependencies && \
    apt-get install -y {% for dep in celery.reqs %} {{ dep }}{% endfor %} && \
    \
    echo installing pip && \
    curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | python && \
    \
    echo installing virtualenv and creating one && \
    pip install virtualenv && \
    virtualenv $CELERY_VIRTUAL_ENV_DIR && \
    \
    echo installing celery python requirements in virtualenv && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install $(echo {{ celery.python_install_requires }} | tr -d "',[]")

VOLUME {% for dep in celery.persistence_path %} {{ dep }}{% endfor %}

############################## install cloudify core components ##############################
WORKDIR /etc/service/celeryd-cloudify-management/

RUN $CELERY_VIRTUAL_ENV_DIR/bin/pip install {{ celery.modules.cloudify_rest_client }} && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install {{ celery.modules.cloudify_plugins_common }} && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install {{ celery.modules.cloudify_script_plugin }} && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install {{ celery.modules.cloudify_diamond_plugin }} && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install {{ celery.modules.cloudify_agent }} && \
    /bin/bash -c 'git clone {{ celery.modules.cloudify_manager }} && \
    pushd cloudify-manager/plugins/riemann-controller && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install . && \
    popd && \
    pushd cloudify-manager/workflows && \
    $CELERY_VIRTUAL_ENV_DIR/bin/pip install .'

# inject required params to run script and create logs dir
RUN sed -i '1s|^|CELERY_HOME_DIR='$CELERY_SERVICE_DIR' \n|' $CELERY_RUN_FILE && \
    sed -i '1s|^|CELERY_LOG_DIR='$CELERY_LOG_DIR' \n|' $CELERY_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $CELERY_RUN_FILE && \
    mkdir -p $CELERY_LOG_DIR && \
    chmod +x $CELERY_RUN_FILE

# ------------------------------------------------------------------------------------------------------------------------------------------ #
# INSTALL - MANAGER
# ------------------------------------------------------------------------------------------------------------------------------------------ #
##### ENV #####
ENV MANAGER_SERVICE_NAME {{ manager.service_name }}
ENV MANAGER_SERVICES_DIR /opt/$MANAGER_SERVICE_NAME
ENV MANAGER_VIRTUAL_ENV_DIR $MANAGER_SERVICES_DIR/env
ENV SERVER_FILES_DIR $MANAGER_SERVICES_DIR/cloudify-manager*/rest-service/manager_rest

ENV AMQPFLUX_RUN_FILE /etc/service/amqp-influx/run
ENV REST_RUN_FILE /etc/service/rest-service/run

ENV REST_CONFIG_PATH /etc/service/rest-service/guni.conf
##### ENV #####
# add run scripts and configuration
ADD amqp_influx/ /etc/service/amqp-influx/
ADD rest_service/ /etc/service/rest-service/

WORKDIR /opt/manager/

RUN echo install dependencies && \
    apt-get install -y {% for dep in manager.reqs %} {{ dep }}{% endfor %} && \
    \
    echo installing pip && \
    curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | python && \
    \
    echo install virtualenv and create one && \
    pip install virtualenv && \
    virtualenv $MANAGER_VIRTUAL_ENV_DIR && \
    \
    echo installing amqpinflux && \
    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install {{ manager.modules.cloudify_amqp_influxdb }} && \
    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install {{ manager.modules.cloudify_rest_client }} && \
    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install {{ manager.modules.cloudify_dsl_parser }} && \
    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install {{ manager.modules.cloudify_plugins_common }} && \
    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install {{ manager.modules.flask_securest }} && \
    \
    echo installing rest-service && \
    /bin/bash -c 'git clone {{ manager.modules.cloudify_manager }} && \
#    pushd cloudify-manager/plugins/plugin-installer && \
#    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install . && \
#    popd && \
    pushd cloudify-manager/rest-service && \
    $MANAGER_VIRTUAL_ENV_DIR/bin/pip install .' && \
    \
    echo injecting required params to run script && \
    sed -i '1s|^|MANAGER_VIRTUALENV_DIR='$MANAGER_VIRTUAL_ENV_DIR' \n|' $AMQPFLUX_RUN_FILE && \
    sed -i '1s|^|MANAGER_VIRTUALENV_DIR='$MANAGER_VIRTUAL_ENV_DIR' \n|' $REST_RUN_FILE && \
    sed -i '1s|^|MANAGER_REST_CONFIG_PATH='$REST_CONFIG_PATH' \n|' $REST_RUN_FILE && \
    sed -i '1s|^|SERVER_FILES_DIR='$SERVER_FILES_DIR' \n|' $REST_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $REST_RUN_FILE && \
    sed -i '1s|^|#!/bin/bash \n|' $AMQPFLUX_RUN_FILE && \
    \
    echo creating logs folder && \
    mkdir -p /var/log/cloudify && \
    \
    echo copying rest-service resources to resource folder && \
    cp -r /opt/manager/cloudify-manager/resources/rest-service/. /opt/manager/resources && \
    \
    echo granting run permissions to run file && \
    chmod +x $AMQPFLUX_RUN_FILE && \
    chmod +x $REST_RUN_FILE

EXPOSE {% for dep in manager.ports %} {{ dep }}{% endfor %}
#manager persistence path
VOLUME {% for dep in manager.persistence_path %} {{ dep }}{% endfor %}
